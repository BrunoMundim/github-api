{"ast":null,"code":"var _jsxFileName = \"/home/mundim/WORKSPACE/Estudo Programa\\xE7\\xE3o/eduzz-fullstack-developer-3/React/Criando um front-end totalmente componentizado na pr\\xE1tica/github-api/src/providers/GithubProviders.js\";\nimport React, { createContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GithubContext = /*#__PURE__*/createContext({\n  user: {},\n  repositories: [],\n  starred: []\n});\n\nconst GithubProviders = _ref => {\n  let {\n    children\n  } = _ref;\n\n  /*  const [githubState, setGithubState] = useState({\n      user: {\n        login: undefined,\n        name: undefined,\n        html_url: undefined,\n        blog: undefined,\n        company: undefined,\n        location: undefined,\n        followers: 0,\n        following: 0,\n        publicGists: 0,\n        publicRepos: 0,      \n      },\n      repositories: [],\n      starred: [],\n    })*/\n  const contextValue = {\n    githubState\n  };\n  return /*#__PURE__*/_jsxDEV(GithubContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_c = GithubProviders;\nGithubProviders.propTypes = {\n  children: PropTypes.any\n};\nexport default GithubProviders;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubProviders\");","map":{"version":3,"sources":["/home/mundim/WORKSPACE/Estudo Programação/eduzz-fullstack-developer-3/React/Criando um front-end totalmente componentizado na prática/github-api/src/providers/GithubProviders.js"],"names":["React","createContext","useState","PropTypes","GithubContext","user","repositories","starred","GithubProviders","children","contextValue","githubState","propTypes","any"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,OAAO,MAAMC,aAAa,gBAAGH,aAAa,CAAC;AACzCI,EAAAA,IAAI,EAAE,EADmC;AAEzCC,EAAAA,YAAY,EAAE,EAF2B;AAGzCC,EAAAA,OAAO,EAAE;AAHgC,CAAD,CAAnC;;AAMP,MAAMC,eAAe,GAAG,QAAkB;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE,QAAMC,YAAY,GAAG;AACnBC,IAAAA;AADmB,GAArB;AAKA,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAKD,YADZ;AAAA,cAGID;AAHJ;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAhCD;;KAAMD,e;AAkCNA,eAAe,CAACI,SAAhB,GAA4B;AAC1BH,EAAAA,QAAQ,EAAEN,SAAS,CAACU;AADM,CAA5B;AAIA,eAAeL,eAAf","sourcesContent":["import React, { createContext, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const GithubContext = createContext({\n  user: {},\n  repositories: [],\n  starred: [],\n});\n\nconst GithubProviders = ({ children }) => {\n  \n/*  const [githubState, setGithubState] = useState({\n    user: {\n      login: undefined,\n      name: undefined,\n      html_url: undefined,\n      blog: undefined,\n      company: undefined,\n      location: undefined,\n      followers: 0,\n      following: 0,\n      publicGists: 0,\n      publicRepos: 0,      \n    },\n    repositories: [],\n    starred: [],\n  })*/\n\n  const contextValue = {\n    githubState,\n    \n  }\n\n  return (\n    <GithubContext.Provider \n      value = { contextValue }\n    >\n      { children }\n      \n    </GithubContext.Provider>\n  );  \n}\n\nGithubProviders.propTypes = {\n  children: PropTypes.any,\n}\n\nexport default GithubProviders;"]},"metadata":{},"sourceType":"module"}