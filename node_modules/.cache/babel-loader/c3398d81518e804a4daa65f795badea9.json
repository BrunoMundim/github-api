{"ast":null,"code":"var _jsxFileName = \"/home/mundim/WORKSPACE/Estudo Programa\\xE7\\xE3o/eduzz-fullstack-developer-3/React/Criando um front-end totalmente componentizado na pr\\xE1tica/github-api/src/providers/GithubProviders.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GithubContext = /*#__PURE__*/createContext({\n  loading: false,\n  user: {},\n  repositories: [],\n  starred: []\n});\n\nconst GithubProviders = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [githubState, setGithubState] = useState({\n    hasUser: false,\n    loading: false,\n    user: {\n      login: undefined,\n      name: undefined,\n      html_url: undefined,\n      blog: undefined,\n      company: undefined,\n      location: undefined,\n      followers: 0,\n      following: 0,\n      publicGists: 0,\n      publicRepos: 0\n    },\n    repositories: [],\n    starred: []\n  });\n\n  const getUser = username => {\n    api.get(`users/${username}`).then(_ref2 => {\n      let {\n        data\n      } = _ref2;\n      setGithubState(prevState => ({ ...prevState,\n        user: {\n          login: data.login,\n          name: data.name,\n          html_url: data.html_url,\n          blog: data.blog,\n          company: data.company,\n          location: data.location,\n          followers: data.followers,\n          following: data.following,\n          public_gists: data.public_gists,\n          public_repos: data.public_repos\n        }\n      }));\n    });\n  };\n\n  const contextValue = {\n    githubState,\n    getUser: useCallback(username => getUser(username), [])\n  };\n  return /*#__PURE__*/_jsxDEV(GithubContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GithubProviders, \"0d10ghnh+Aszv3FMpZAYuJeof6E=\");\n\n_c = GithubProviders;\nGithubProviders.propTypes = {\n  children: PropTypes.any\n};\nexport default GithubProviders;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubProviders\");","map":{"version":3,"sources":["/home/mundim/WORKSPACE/Estudo Programação/eduzz-fullstack-developer-3/React/Criando um front-end totalmente componentizado na prática/github-api/src/providers/GithubProviders.js"],"names":["React","createContext","useCallback","useState","PropTypes","api","GithubContext","loading","user","repositories","starred","GithubProviders","children","githubState","setGithubState","hasUser","login","undefined","name","html_url","blog","company","location","followers","following","publicGists","publicRepos","getUser","username","get","then","data","prevState","public_gists","public_repos","contextValue","propTypes","any"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,QAA5C,QAA4D,OAA5D;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,iBAAhB;;AAEA,OAAO,MAAMC,aAAa,gBAAGL,aAAa,CAAC;AACzCM,EAAAA,OAAO,EAAE,KADgC;AAEzCC,EAAAA,IAAI,EAAE,EAFmC;AAGzCC,EAAAA,YAAY,EAAE,EAH2B;AAIzCC,EAAAA,OAAO,EAAE;AAJgC,CAAD,CAAnC;;AAOP,MAAMC,eAAe,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACxC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC;AAC7CY,IAAAA,OAAO,EAAE,KADoC;AAE7CR,IAAAA,OAAO,EAAE,KAFoC;AAG7CC,IAAAA,IAAI,EAAE;AACJQ,MAAAA,KAAK,EAAEC,SADH;AAEJC,MAAAA,IAAI,EAAED,SAFF;AAGJE,MAAAA,QAAQ,EAAEF,SAHN;AAIJG,MAAAA,IAAI,EAAEH,SAJF;AAKJI,MAAAA,OAAO,EAAEJ,SALL;AAMJK,MAAAA,QAAQ,EAAEL,SANN;AAOJM,MAAAA,SAAS,EAAE,CAPP;AAQJC,MAAAA,SAAS,EAAE,CARP;AASJC,MAAAA,WAAW,EAAE,CATT;AAUJC,MAAAA,WAAW,EAAE;AAVT,KAHuC;AAe7CjB,IAAAA,YAAY,EAAE,EAf+B;AAgB7CC,IAAAA,OAAO,EAAE;AAhBoC,GAAD,CAA9C;;AAmBA,QAAMiB,OAAO,GAAKC,QAAF,IAAgB;AAC9BvB,IAAAA,GAAG,CACAwB,GADH,CACQ,SAAQD,QAAS,EADzB,EAEGE,IAFH,CAEQ,SAAc;AAAA,UAAb;AAAEC,QAAAA;AAAF,OAAa;AAClBjB,MAAAA,cAAc,CAAEkB,SAAD,KAAgB,EAC7B,GAAGA,SAD0B;AAE7BxB,QAAAA,IAAI,EAAE;AACJQ,UAAAA,KAAK,EAAEe,IAAI,CAACf,KADR;AAEJE,UAAAA,IAAI,EAAEa,IAAI,CAACb,IAFP;AAGJC,UAAAA,QAAQ,EAAEY,IAAI,CAACZ,QAHX;AAIJC,UAAAA,IAAI,EAAEW,IAAI,CAACX,IAJP;AAKJC,UAAAA,OAAO,EAAEU,IAAI,CAACV,OALV;AAMJC,UAAAA,QAAQ,EAAES,IAAI,CAACT,QANX;AAOJC,UAAAA,SAAS,EAAEQ,IAAI,CAACR,SAPZ;AAQJC,UAAAA,SAAS,EAAEO,IAAI,CAACP,SARZ;AASJS,UAAAA,YAAY,EAAEF,IAAI,CAACE,YATf;AAUJC,UAAAA,YAAY,EAAEH,IAAI,CAACG;AAVf;AAFuB,OAAhB,CAAD,CAAd;AAeD,KAlBH;AAmBD,GApBD;;AAsBA,QAAMC,YAAY,GAAG;AACnBtB,IAAAA,WADmB;AAEnBc,IAAAA,OAAO,EAAEzB,WAAW,CAAE0B,QAAD,IAAcD,OAAO,CAACC,QAAD,CAAtB,EAAkC,EAAlC;AAFD,GAArB;AAMA,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAKO,YADZ;AAAA,cAGIvB;AAHJ;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAxDD;;GAAMD,e;;KAAAA,e;AA0DNA,eAAe,CAACyB,SAAhB,GAA4B;AAC1BxB,EAAAA,QAAQ,EAAER,SAAS,CAACiC;AADM,CAA5B;AAIA,eAAe1B,eAAf","sourcesContent":["import React, { createContext, useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport api from '../services/api'\n\nexport const GithubContext = createContext({\n  loading: false,\n  user: {},\n  repositories: [],\n  starred: [],\n});\n\nconst GithubProviders = ({ children }) => {  \n  const [githubState, setGithubState] = useState({\n    hasUser: false,\n    loading: false,\n    user: {\n      login: undefined,\n      name: undefined,\n      html_url: undefined,\n      blog: undefined,\n      company: undefined,\n      location: undefined,\n      followers: 0,\n      following: 0,\n      publicGists: 0,\n      publicRepos: 0,      \n    },\n    repositories: [],\n    starred: [],\n  });\n\n  const getUser = ( username ) => {\n    api\n      .get(`users/${username}`)\n      .then(({ data }) => {\n        setGithubState((prevState) => ({\n          ...prevState,\n          user: {\n            login: data.login,\n            name: data.name,\n            html_url: data.html_url,\n            blog: data.blog,\n            company: data.company,\n            location: data.location,\n            followers: data.followers,\n            following: data.following,\n            public_gists: data.public_gists,\n            public_repos: data.public_repos,\n          },\n        }));\n      });\n  }\n\n  const contextValue = {\n    githubState,\n    getUser: useCallback((username) => getUser(username), []),\n    \n  }\n\n  return (\n    <GithubContext.Provider \n      value = { contextValue }\n    >\n      { children }\n      \n    </GithubContext.Provider>\n  );  \n}\n\nGithubProviders.propTypes = {\n  children: PropTypes.any,\n}\n\nexport default GithubProviders;"]},"metadata":{},"sourceType":"module"}