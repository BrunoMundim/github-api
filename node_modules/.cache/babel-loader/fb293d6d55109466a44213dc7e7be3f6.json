{"ast":null,"code":"var _jsxFileName = \"/home/mundim/WORKSPACE/Estudo Programa\\xE7\\xE3o/eduzz-fullstack-developer-3/React/Criando um front-end totalmente componentizado na pr\\xE1tica/github-api/src/providers/GithubProviders.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GithubContext = /*#__PURE__*/createContext({\n  loading: false,\n  user: {},\n  repositories: [],\n  starred: []\n});\n\nconst GithubProviders = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [githubState, setGithubState] = useState({\n    loading: false,\n    user: {\n      login: undefined,\n      name: undefined,\n      html_url: undefined,\n      blog: undefined,\n      company: undefined,\n      location: undefined,\n      followers: 0,\n      following: 0,\n      publicGists: 0,\n      publicRepos: 0\n    },\n    repositories: [],\n    starred: []\n  });\n\n  const getUser = async username => {\n    api.get(`users/${username}`).then(_ref2 => {\n      let {\n        data: {\n          user\n        }\n      } = _ref2;\n      setGithubState(prevState => ({ ...prevState,\n        user: {\n          login: user.login,\n          name: user.name,\n          html_url: user.html_url,\n          blog: user.blog,\n          company: user.company,\n          location: user.location,\n          followers: user.followers,\n          following: user.following,\n          publicGists: user.publicGists,\n          publicRepos: user.publicRepos\n        }\n      }));\n    });\n  };\n\n  const contextValue = {\n    githubState\n  };\n  return /*#__PURE__*/_jsxDEV(GithubContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GithubProviders, \"zQ0zkVUSyCiCNr0CsMwYSwORghI=\");\n\n_c = GithubProviders;\nGithubProviders.propTypes = {\n  children: PropTypes.any\n};\nexport default GithubProviders;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubProviders\");","map":{"version":3,"sources":["/home/mundim/WORKSPACE/Estudo Programação/eduzz-fullstack-developer-3/React/Criando um front-end totalmente componentizado na prática/github-api/src/providers/GithubProviders.js"],"names":["React","createContext","useState","PropTypes","api","GithubContext","loading","user","repositories","starred","GithubProviders","children","githubState","setGithubState","login","undefined","name","html_url","blog","company","location","followers","following","publicGists","publicRepos","getUser","username","get","then","data","prevState","contextValue","propTypes","any"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,iBAAhB;;AAEA,OAAO,MAAMC,aAAa,gBAAGJ,aAAa,CAAC;AACzCK,EAAAA,OAAO,EAAE,KADgC;AAEzCC,EAAAA,IAAI,EAAE,EAFmC;AAGzCC,EAAAA,YAAY,EAAE,EAH2B;AAIzCC,EAAAA,OAAO,EAAE;AAJgC,CAAD,CAAnC;;AAOP,MAAMC,eAAe,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAE1C,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC;AAC3CI,IAAAA,OAAO,EAAE,KADkC;AAE3CC,IAAAA,IAAI,EAAE;AACJO,MAAAA,KAAK,EAAEC,SADH;AAEJC,MAAAA,IAAI,EAAED,SAFF;AAGJE,MAAAA,QAAQ,EAAEF,SAHN;AAIJG,MAAAA,IAAI,EAAEH,SAJF;AAKJI,MAAAA,OAAO,EAAEJ,SALL;AAMJK,MAAAA,QAAQ,EAAEL,SANN;AAOJM,MAAAA,SAAS,EAAE,CAPP;AAQJC,MAAAA,SAAS,EAAE,CARP;AASJC,MAAAA,WAAW,EAAE,CATT;AAUJC,MAAAA,WAAW,EAAE;AAVT,KAFqC;AAc3ChB,IAAAA,YAAY,EAAE,EAd6B;AAe3CC,IAAAA,OAAO,EAAE;AAfkC,GAAD,CAA9C;;AAkBE,QAAMgB,OAAO,GAAG,MAAQC,QAAR,IAAsB;AACpCtB,IAAAA,GAAG,CACAuB,GADH,CACQ,SAAQD,QAAS,EADzB,EAEGE,IAFH,CAEQ,SAAsB;AAAA,UAArB;AAACC,QAAAA,IAAI,EAAE;AAAEtB,UAAAA;AAAF;AAAP,OAAqB;AAC5BM,MAAAA,cAAc,CAACiB,SAAS,KACvB,EAAC,GAAGA,SAAJ;AAAevB,QAAAA,IAAI,EAAC;AACnBO,UAAAA,KAAK,EAAEP,IAAI,CAACO,KADO;AAEnBE,UAAAA,IAAI,EAAET,IAAI,CAACS,IAFQ;AAGnBC,UAAAA,QAAQ,EAAEV,IAAI,CAACU,QAHI;AAInBC,UAAAA,IAAI,EAAEX,IAAI,CAACW,IAJQ;AAKnBC,UAAAA,OAAO,EAAEZ,IAAI,CAACY,OALK;AAMnBC,UAAAA,QAAQ,EAAEb,IAAI,CAACa,QANI;AAOnBC,UAAAA,SAAS,EAAEd,IAAI,CAACc,SAPG;AAQnBC,UAAAA,SAAS,EAAEf,IAAI,CAACe,SARG;AASnBC,UAAAA,WAAW,EAAEhB,IAAI,CAACgB,WATC;AAUnBC,UAAAA,WAAW,EAAEjB,IAAI,CAACiB;AAVC;AAApB,OADuB,CAAV,CAAd;AAcD,KAjBD;AAkBD,GAnBD;;AAqBA,QAAMO,YAAY,GAAG;AACnBnB,IAAAA;AADmB,GAArB;AAKA,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAKmB,YADZ;AAAA,cAGIpB;AAHJ;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAtDD;;GAAMD,e;;KAAAA,e;AAwDNA,eAAe,CAACsB,SAAhB,GAA4B;AAC1BrB,EAAAA,QAAQ,EAAER,SAAS,CAAC8B;AADM,CAA5B;AAIA,eAAevB,eAAf","sourcesContent":["import React, { createContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport api from '../services/api'\n\nexport const GithubContext = createContext({\n  loading: false,\n  user: {},\n  repositories: [],\n  starred: [],\n});\n\nconst GithubProviders = ({ children }) => {\n  \nconst [githubState, setGithubState] = useState({\n    loading: false,\n    user: {\n      login: undefined,\n      name: undefined,\n      html_url: undefined,\n      blog: undefined,\n      company: undefined,\n      location: undefined,\n      followers: 0,\n      following: 0,\n      publicGists: 0,\n      publicRepos: 0,      \n    },\n    repositories: [],\n    starred: [],\n  });\n\n  const getUser = async ( username ) => {\n    api\n      .get(`users/${username}`)\n      .then(({data: { user }}) => {\n      setGithubState(prevState => \n      ({...prevState, user:{\n        login: user.login,\n        name: user.name,\n        html_url: user.html_url,\n        blog: user.blog,\n        company: user.company,\n        location: user.location,\n        followers: user.followers,\n        following: user.following,\n        publicGists: user.publicGists,\n        publicRepos: user.publicRepos, \n      },\n    }));\n    })\n  }\n\n  const contextValue = {\n    githubState,\n    \n  }\n\n  return (\n    <GithubContext.Provider \n      value = { contextValue }\n    >\n      { children }\n      \n    </GithubContext.Provider>\n  );  \n}\n\nGithubProviders.propTypes = {\n  children: PropTypes.any,\n}\n\nexport default GithubProviders;"]},"metadata":{},"sourceType":"module"}