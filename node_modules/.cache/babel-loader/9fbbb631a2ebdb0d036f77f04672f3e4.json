{"ast":null,"code":"var _jsxFileName = \"/home/mundim/WORKSPACE/Estudo Programa\\xE7\\xE3o/eduzz-fullstack-developer-3/React/Criando um front-end totalmente componentizado na pr\\xE1tica/github-api/src/providers/GithubProviders.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport api from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GithubContext = /*#__PURE__*/createContext({\n  user: {},\n  repositories: [],\n  starred: []\n});\n\nconst GithubProviders = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [githubState, setGithubState] = useState({\n    user: {\n      login: 'Bruno',\n      name: 'Bruno',\n      html_url: 'https://github.com/benits/github-api-interface/blob/main/src/providers/github-provider.js',\n      blog: undefined,\n      company: undefined,\n      location: undefined,\n      followers: 0,\n      following: 0,\n      publicGists: 0,\n      publicRepos: 0\n    },\n    repositories: [],\n    starred: []\n  });\n  const contextValue = {\n    githubState\n  };\n\n  const getUserRepos = username => {\n    api.get(`users/${username}/repos`).then(_ref2 => {\n      let {\n        data\n      } = _ref2;\n      console.log(\"data: \" + JSON.stringify(data));\n      setGithubState(prevState => ({ ...prevState,\n        repositories: data\n      }));\n    });\n  };\n\n  getUserRepos();\n  return /*#__PURE__*/_jsxDEV(GithubContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GithubProviders, \"GAkSWP4RGmMowCqOh1NQ7BqJXzo=\");\n\n_c = GithubProviders;\nGithubProviders.propTypes = {\n  children: PropTypes.any\n};\nexport default GithubProviders;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubProviders\");","map":{"version":3,"sources":["/home/mundim/WORKSPACE/Estudo Programação/eduzz-fullstack-developer-3/React/Criando um front-end totalmente componentizado na prática/github-api/src/providers/GithubProviders.js"],"names":["React","createContext","useState","PropTypes","api","GithubContext","user","repositories","starred","GithubProviders","children","githubState","setGithubState","login","name","html_url","blog","undefined","company","location","followers","following","publicGists","publicRepos","contextValue","getUserRepos","username","get","then","data","console","log","JSON","stringify","prevState","propTypes","any"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,iBAAhB;;AAEA,OAAO,MAAMC,aAAa,gBAAGJ,aAAa,CAAC;AACzCK,EAAAA,IAAI,EAAE,EADmC;AAEzCC,EAAAA,YAAY,EAAE,EAF2B;AAGzCC,EAAAA,OAAO,EAAE;AAHgC,CAAD,CAAnC;;AAMP,MAAMC,eAAe,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAExC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC;AAC7CI,IAAAA,IAAI,EAAE;AACJO,MAAAA,KAAK,EAAE,OADH;AAEJC,MAAAA,IAAI,EAAE,OAFF;AAGJC,MAAAA,QAAQ,EAAE,2FAHN;AAIJC,MAAAA,IAAI,EAAEC,SAJF;AAKJC,MAAAA,OAAO,EAAED,SALL;AAMJE,MAAAA,QAAQ,EAAEF,SANN;AAOJG,MAAAA,SAAS,EAAE,CAPP;AAQJC,MAAAA,SAAS,EAAE,CARP;AASJC,MAAAA,WAAW,EAAE,CATT;AAUJC,MAAAA,WAAW,EAAE;AAVT,KADuC;AAa7ChB,IAAAA,YAAY,EAAE,EAb+B;AAc7CC,IAAAA,OAAO,EAAE;AAdoC,GAAD,CAA9C;AAiBA,QAAMgB,YAAY,GAAG;AACnBb,IAAAA;AADmB,GAArB;;AAKA,QAAMc,YAAY,GAAIC,QAAD,IAAc;AACjCtB,IAAAA,GAAG,CAACuB,GAAJ,CAAS,SAAQD,QAAS,QAA1B,EAAmCE,IAAnC,CAAwC,SAAc;AAAA,UAAb;AAAEC,QAAAA;AAAF,OAAa;AACpDC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAWC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAvB;AACAjB,MAAAA,cAAc,CAAEsB,SAAD,KAAgB,EAC7B,GAAGA,SAD0B;AAE7B3B,QAAAA,YAAY,EAAEsB;AAFe,OAAhB,CAAD,CAAd;AAID,KAND;AAOD,GARD;;AAUAJ,EAAAA,YAAY;AAEZ,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAKD,YADZ;AAAA,cAGId;AAHJ;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA5CD;;GAAMD,e;;KAAAA,e;AA8CNA,eAAe,CAAC0B,SAAhB,GAA4B;AAC1BzB,EAAAA,QAAQ,EAAEP,SAAS,CAACiC;AADM,CAA5B;AAIA,eAAe3B,eAAf","sourcesContent":["import React, { createContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport api from \"../services/api\";\n\nexport const GithubContext = createContext({\n  user: {},\n  repositories: [],\n  starred: [],\n});\n\nconst GithubProviders = ({ children }) => {\n  \n  const [githubState, setGithubState] = useState({\n    user: {\n      login: 'Bruno',\n      name: 'Bruno',\n      html_url: 'https://github.com/benits/github-api-interface/blob/main/src/providers/github-provider.js',\n      blog: undefined,\n      company: undefined,\n      location: undefined,\n      followers: 0,\n      following: 0,\n      publicGists: 0,\n      publicRepos: 0,      \n    },\n    repositories: [],\n    starred: [],\n  })\n\n  const contextValue = {\n    githubState,\n    \n  }\n\n  const getUserRepos = (username) => {\n    api.get(`users/${username}/repos`).then(({ data }) => {\n      console.log(\"data: \" + JSON.stringify(data));\n      setGithubState((prevState) => ({\n        ...prevState,\n        repositories: data,\n      }));\n    });\n  };\n\n  getUserRepos()\n\n  return (\n    <GithubContext.Provider \n      value = { contextValue }\n    >\n      { children }\n      \n    </GithubContext.Provider>\n  );  \n}\n\nGithubProviders.propTypes = {\n  children: PropTypes.any,\n}\n\nexport default GithubProviders;"]},"metadata":{},"sourceType":"module"}